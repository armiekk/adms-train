/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class PriBussinessSpecApi {
    protected basePath = '/api/pri';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * PriBussinessSpec.addProjAccessories
     * สำหรับการบันทึกข้อมูลProject Accessories
     * @param body 
     */
    public addProjAccessories(body?: models.ProjAccessoriesAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritAccessories';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjCondition
     * สำหรับการบันทึกข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public addProjCondition(body?: models.ProjConditionAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjCustomer
     * สำหรับการบันทึกข้อมูลProject Customer
     * @param body 
     */
    public addProjCustomer(body?: models.ProjCustomerAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCustomer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjDeliver
     * สำหรับการบันทึกข้อมูลการส่งมอบโครงการ
     * @param body 
     */
    public addProjDeliver(body?: models.ProjDeliverAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritDeliver';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjLanguage
     * สำหรับการบันทึกข้อมูลProject Language
     * @param body 
     */
    public addProjLanguage(body?: models.ProjLanguageAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLanguage';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjLimit
     * สำหรับการบันทึกข้อมูลProject Limit
     * @param body 
     */
    public addProjLimit(body?: models.ProjLimitAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLimit';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjMethod
     * สำหรับการบันทึกข้อมูลProject Method
     * @param body 
     */
    public addProjMethod(body?: models.ProjMethodAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMethod';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjMonitor
     * สำหรับการบันทึกข้อมูลProject Monitor
     * @param body 
     */
    public addProjMonitor(body?: models.ProjMonitorAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMonitor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjOther
     * สำหรับการบันทึกข้อมูลProject Other
     * @param body 
     */
    public addProjOther(body?: models.ProjOtherAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritOther';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjScope
     * สำหรับการบันทึกข้อมูลขอบเขตของโครงการ
     * @param body 
     */
    public addProjScope(body?: models.ProjScopeAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritScope';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjSystems
     * สำหรับการบันทึกข้อมูลProject Systems
     * @param body 
     */
    public addProjSystems(body?: models.ProjSystemsAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritSystems';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjTools
     * สำหรับการบันทึกข้อมูลProject Tools
     * @param body 
     */
    public addProjTools(body?: models.ProjToolsAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTools';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjTrain
     * สำหรับการบันทึกข้อมูลProject Train
     * @param body 
     */
    public addProjTrain(body?: models.ProjTrainAddBean, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTrain';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.addProjectInformation
     * สำหรับการบันทึกข้อมูลรายละเอียดโครงการ
     * @param body 
     */
    public addProjectInformation(body?: models.ProjectInformationBean, extraHttpRequestParams?: any): Observable<models.PritInformation> {
        const path = this.basePath + '/pritInformation';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjAccessories
     * สำหรับการแก้ไขข้อมูลProject Accessories
     * @param body 
     */
    public editProjAccessories(body?: models.ProjAccessoriesBean, extraHttpRequestParams?: any): Observable<models.ProjAccessoriesBean> {
        const path = this.basePath + '/pritAccessories';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjCondition
     * สำหรับการแก้ไขข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public editProjCondition(body?: models.ProjConditionBean, extraHttpRequestParams?: any): Observable<models.ProjConditionBean> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjCustomer
     * สำหรับการแก้ไขข้อมูลProject Customer
     * @param body 
     */
    public editProjCustomer(body?: models.ProjCustomerBean, extraHttpRequestParams?: any): Observable<models.ProjCustomerBean> {
        const path = this.basePath + '/pritCustomer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjDeliver
     * สำหรับการแก้ไขข้อมูลการส่งมอบโครงการ
     * @param body 
     */
    public editProjDeliver(body?: models.ProjDeliverBean, extraHttpRequestParams?: any): Observable<models.ProjDeliverBean> {
        const path = this.basePath + '/pritDeliver';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjLanguage
     * สำหรับการแก้ไขข้อมูลProject Language
     * @param body 
     */
    public editProjLanguage(body?: models.ProjLanguageBean, extraHttpRequestParams?: any): Observable<models.ProjLanguageBean> {
        const path = this.basePath + '/pritLanguage';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjLimit
     * สำหรับการแก้ไขข้อมูลProject Limit
     * @param body 
     */
    public editProjLimit(body?: models.ProjLimitBean, extraHttpRequestParams?: any): Observable<models.ProjLimitBean> {
        const path = this.basePath + '/pritLimit';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjMethod
     * สำหรับการแก้ไขข้อมูลProject Method
     * @param body 
     */
    public editProjMethod(body?: models.ProjMethodBean, extraHttpRequestParams?: any): Observable<models.ProjMethodBean> {
        const path = this.basePath + '/pritMethod';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjMonitor
     * สำหรับการแก้ไขข้อมูลProject Monitor
     * @param body 
     */
    public editProjMonitor(body?: models.ProjMonitorBean, extraHttpRequestParams?: any): Observable<models.ProjMonitorBean> {
        const path = this.basePath + '/pritMonitor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjOther
     * สำหรับการแก้ไขข้อมูลProject Other
     * @param body 
     */
    public editProjOther(body?: models.ProjOtherBean, extraHttpRequestParams?: any): Observable<models.ProjOtherBean> {
        const path = this.basePath + '/pritOther';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjScope
     * สำหรับการแก้ไขข้อมูลขอบเขตของโครงการ
     * @param body 
     */
    public editProjScope(body?: models.ProjScopeBean, extraHttpRequestParams?: any): Observable<models.ProjScopeBean> {
        const path = this.basePath + '/pritScope';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjSystems
     * สำหรับการแก้ไขข้อมูลProject Systems
     * @param body 
     */
    public editProjSystems(body?: models.ProjSystemsBean, extraHttpRequestParams?: any): Observable<models.ProjSystemsBean> {
        const path = this.basePath + '/pritSystems';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjTools
     * สำหรับการแก้ไขข้อมูลProject Tools
     * @param body 
     */
    public editProjTools(body?: models.ProjToolsBean, extraHttpRequestParams?: any): Observable<models.ProjToolsBean> {
        const path = this.basePath + '/pritTools';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjTrain
     * สำหรับการแก้ไขข้อมูลProject Train
     * @param body 
     */
    public editProjTrain(body?: models.ProjTrainBean, extraHttpRequestParams?: any): Observable<models.ProjTrainBean> {
        const path = this.basePath + '/pritTrain';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjectInformation
     * สำหรับการแก้ไขข้อมูลรายละเอียดโครงการ
     * @param body 
     */
    public editProjectInformation(body?: models.ProjectInformationEditBean, extraHttpRequestParams?: any): Observable<models.ProjectInformationEditBean> {
        const path = this.basePath + '/pritInformation';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjAccessoriesByRef
     * สำหรับการค้นหาตารางข้อมูลProject Accessories ตาม Primary key
     * @param projAccessoriesRef 
     */
    public getProjAccessoriesByRef(projAccessoriesRef: number, extraHttpRequestParams?: any): Observable<models.PritAccessories> {
        const path = this.basePath + '/pritAccessories/{projAccessoriesRef}'
            .replace('{' + 'projAccessoriesRef' + '}', String(projAccessoriesRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projAccessoriesRef' is not null or undefined
        if (projAccessoriesRef === null || projAccessoriesRef === undefined) {
            throw new Error('Required parameter projAccessoriesRef was null or undefined when calling getProjAccessoriesByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjAccessoriesList
     * สำหรับการค้นหาตารางข้อมูลProject Accessories
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjAccessoriesList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjAccessoriesBean>> {
        const path = this.basePath + '/pritAccessories/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjAccessoriesList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjConditionByRef
     * สำหรับการค้นหาตารางข้อมูลเงื่อนไขของโครงการ ตาม Primary Key
     * @param projConditionRef 
     */
    public getProjConditionByRef(projConditionRef: number, extraHttpRequestParams?: any): Observable<models.PritCondition> {
        const path = this.basePath + '/pritCondition/{projConditionRef}'
            .replace('{' + 'projConditionRef' + '}', String(projConditionRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projConditionRef' is not null or undefined
        if (projConditionRef === null || projConditionRef === undefined) {
            throw new Error('Required parameter projConditionRef was null or undefined when calling getProjConditionByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjConditionList
     * สำหรับการค้นหาตารางข้อมูลเงื่อนไขของโครงการ
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjConditionList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjConditionBean>> {
        const path = this.basePath + '/pritCondition/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjConditionList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjCustomerByRef
     * สำหรับการค้นหาตารางข้อมูลProject Customer ตาม Primary key
     * @param projCustomerRef 
     */
    public getProjCustomerByRef(projCustomerRef: number, extraHttpRequestParams?: any): Observable<models.PritCustomer> {
        const path = this.basePath + '/pritCustomer/{projCustomerRef}'
            .replace('{' + 'projCustomerRef' + '}', String(projCustomerRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCustomerRef' is not null or undefined
        if (projCustomerRef === null || projCustomerRef === undefined) {
            throw new Error('Required parameter projCustomerRef was null or undefined when calling getProjCustomerByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjCustomerList
     * สำหรับการค้นหาตารางข้อมูลProject Customer
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjCustomerList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjCustomerBean>> {
        const path = this.basePath + '/pritCustomer/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjCustomerList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjDeliverByRef
     * สำหรับการค้นหาตารางข้อมูลการส่งมอบโครงการ ตาม Primary key
     * @param projDeliverRef 
     */
    public getProjDeliverByRef(projDeliverRef: number, extraHttpRequestParams?: any): Observable<models.PritDeliver> {
        const path = this.basePath + '/pritDeliver/{projDeliverRef}'
            .replace('{' + 'projDeliverRef' + '}', String(projDeliverRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projDeliverRef' is not null or undefined
        if (projDeliverRef === null || projDeliverRef === undefined) {
            throw new Error('Required parameter projDeliverRef was null or undefined when calling getProjDeliverByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjDeliverList
     * สำหรับการค้นหาตารางข้อมูลการส่งมอบโครงการ
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjDeliverList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjDeliverBean>> {
        const path = this.basePath + '/pritDeliver/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjDeliverList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjLanguageByRef
     * สำหรับการค้นหาตารางข้อมูลProject Language ตาม Primary key
     * @param projLanguageRef 
     */
    public getProjLanguageByRef(projLanguageRef: number, extraHttpRequestParams?: any): Observable<models.PritLanguage> {
        const path = this.basePath + '/pritLanguage/{projLanguageRef}'
            .replace('{' + 'projLanguageRef' + '}', String(projLanguageRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projLanguageRef' is not null or undefined
        if (projLanguageRef === null || projLanguageRef === undefined) {
            throw new Error('Required parameter projLanguageRef was null or undefined when calling getProjLanguageByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjLanguageList
     * สำหรับการค้นหาตารางข้อมูลProject Language
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjLanguageList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjLanguageBean>> {
        const path = this.basePath + '/pritLanguage/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjLanguageList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjLimitByRef
     * สำหรับการค้นหาตารางข้อมูลProject Limit ตาม Primary key
     * @param projLimitRef 
     */
    public getProjLimitByRef(projLimitRef: number, extraHttpRequestParams?: any): Observable<models.PritLimit> {
        const path = this.basePath + '/pritLimit/{projLimitRef}'
            .replace('{' + 'projLimitRef' + '}', String(projLimitRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projLimitRef' is not null or undefined
        if (projLimitRef === null || projLimitRef === undefined) {
            throw new Error('Required parameter projLimitRef was null or undefined when calling getProjLimitByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjLimitList
     * สำหรับการค้นหาตารางข้อมูลProject Limit
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjLimitList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjLimitBean>> {
        const path = this.basePath + '/pritLimit/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjLimitList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjMethodByRef
     * สำหรับการค้นหาตารางข้อมูลProject Method ตาม Primary key
     * @param projMethodRef 
     */
    public getProjMethodByRef(projMethodRef: number, extraHttpRequestParams?: any): Observable<models.PritMethod> {
        const path = this.basePath + '/pritMethod/{projMethodRef}'
            .replace('{' + 'projMethodRef' + '}', String(projMethodRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projMethodRef' is not null or undefined
        if (projMethodRef === null || projMethodRef === undefined) {
            throw new Error('Required parameter projMethodRef was null or undefined when calling getProjMethodByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjMethodList
     * สำหรับการค้นหาตารางข้อมูลProject Method
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjMethodList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjMethodBean>> {
        const path = this.basePath + '/pritMethod/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjMethodList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjMonitorByRef
     * สำหรับการค้นหาตารางข้อมูลProject Monitor ตาม Primary key
     * @param projMonitorRef 
     */
    public getProjMonitorByRef(projMonitorRef: number, extraHttpRequestParams?: any): Observable<models.PritMonitor> {
        const path = this.basePath + '/pritMonitor/{projMonitorRef}'
            .replace('{' + 'projMonitorRef' + '}', String(projMonitorRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projMonitorRef' is not null or undefined
        if (projMonitorRef === null || projMonitorRef === undefined) {
            throw new Error('Required parameter projMonitorRef was null or undefined when calling getProjMonitorByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjMonitorList
     * สำหรับการค้นหาตารางข้อมูลProject Monitor
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjMonitorList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjMonitorBean>> {
        const path = this.basePath + '/pritMonitor/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjMonitorList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjOtherByRef
     * สำหรับการค้นหาตารางข้อมูลProject Other ตาม Primary key
     * @param projOtherRef 
     */
    public getProjOtherByRef(projOtherRef: number, extraHttpRequestParams?: any): Observable<models.PritOther> {
        const path = this.basePath + '/pritOther/{projOtherRef}'
            .replace('{' + 'projOtherRef' + '}', String(projOtherRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projOtherRef' is not null or undefined
        if (projOtherRef === null || projOtherRef === undefined) {
            throw new Error('Required parameter projOtherRef was null or undefined when calling getProjOtherByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjOtherList
     * สำหรับการค้นหาตารางข้อมูลProject Other
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjOtherList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjOtherBean>> {
        const path = this.basePath + '/pritOther/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjOtherList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjScopeByRef
     * สำหรับการค้นหาตารางข้อมูลขอบเขตของโครงการ ตาม Primary key
     * @param projScopeRef 
     */
    public getProjScopeByRef(projScopeRef: number, extraHttpRequestParams?: any): Observable<models.PritScope> {
        const path = this.basePath + '/pritScope/{projScopeRef}'
            .replace('{' + 'projScopeRef' + '}', String(projScopeRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projScopeRef' is not null or undefined
        if (projScopeRef === null || projScopeRef === undefined) {
            throw new Error('Required parameter projScopeRef was null or undefined when calling getProjScopeByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjScopeList
     * สำหรับการค้นหาตารางข้อมูลขอบเขตของโครงการ
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjScopeList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjScopeBean>> {
        const path = this.basePath + '/pritScope/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjScopeList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjSystemsByRef
     * สำหรับการค้นหาตารางข้อมูลProject Systems ตาม Primary key
     * @param projSystemsRef 
     */
    public getProjSystemsByRef(projSystemsRef: number, extraHttpRequestParams?: any): Observable<models.PritSystems> {
        const path = this.basePath + '/pritSystems/{projSystemsRef}'
            .replace('{' + 'projSystemsRef' + '}', String(projSystemsRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projSystemsRef' is not null or undefined
        if (projSystemsRef === null || projSystemsRef === undefined) {
            throw new Error('Required parameter projSystemsRef was null or undefined when calling getProjSystemsByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjSystemsList
     * สำหรับการค้นหาตารางข้อมูลProject Systems
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjSystemsList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjSystemsBean>> {
        const path = this.basePath + '/pritSystems/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjSystemsList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjToolsByRef
     * สำหรับการค้นหาตารางข้อมูลProject Tools ตาม Primary key
     * @param projToolsRef 
     */
    public getProjToolsByRef(projToolsRef: number, extraHttpRequestParams?: any): Observable<models.PritTools> {
        const path = this.basePath + '/pritTools/{projToolsRef}'
            .replace('{' + 'projToolsRef' + '}', String(projToolsRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projToolsRef' is not null or undefined
        if (projToolsRef === null || projToolsRef === undefined) {
            throw new Error('Required parameter projToolsRef was null or undefined when calling getProjToolsByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjToolsList
     * สำหรับการค้นหาตารางข้อมูลProject Tools
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjToolsList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjToolsBean>> {
        const path = this.basePath + '/pritTools/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjToolsList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjTrainByRef
     * สำหรับการค้นหาตารางข้อมูลProject Train ตาม Primary key
     * @param projTrainRef 
     */
    public getProjTrainByRef(projTrainRef: number, extraHttpRequestParams?: any): Observable<models.PritTrain> {
        const path = this.basePath + '/pritTrain/{projTrainRef}'
            .replace('{' + 'projTrainRef' + '}', String(projTrainRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projTrainRef' is not null or undefined
        if (projTrainRef === null || projTrainRef === undefined) {
            throw new Error('Required parameter projTrainRef was null or undefined when calling getProjTrainByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjTrainList
     * สำหรับการค้นหาตารางข้อมูลProject Train
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjTrainList(projCode: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Array<models.ProjTrainBean>> {
        const path = this.basePath + '/pritTrain/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjTrainList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjectInformationByRef
     * สำหรับการค้นหาตารางข้อมูลรายละเอียดโครงการ ตาม Primary Key
     * @param projRef 
     */
    public getProjectInformationByRef(projRef: number, extraHttpRequestParams?: any): Observable<models.PritInformation> {
        const path = this.basePath + '/pritInformation/projRef/{projRef}'
            .replace('{' + 'projRef' + '}', String(projRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projRef' is not null or undefined
        if (projRef === null || projRef === undefined) {
            throw new Error('Required parameter projRef was null or undefined when calling getProjectInformationByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjectInformationListByCondition
     * สำหรับการค้นหาตารางข้อมูลรายละเอียดโครงการ
     * @param start 
     * @param size 
     * @param projCode 
     * @param projYear 
     * @param projOrgCode 
     * @param projType 
     * @param projName 
     * @param projStatus 
     */
    public getProjectInformationListByCondition(start?: number, size?: number, projCode?: string, projYear?: number, projOrgCode?: string, projType?: string, projName?: string, projStatus?: string, extraHttpRequestParams?: any): Observable<Array<models.ProjectInformationInfoBean>> {
        const path = this.basePath + '/pritInformation';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        if (projCode !== undefined) {
            queryParameters.set('projCode', String(projCode));
        }

        if (projYear !== undefined) {
            queryParameters.set('projYear', String(projYear));
        }

        if (projOrgCode !== undefined) {
            queryParameters.set('projOrgCode', String(projOrgCode));
        }

        if (projType !== undefined) {
            queryParameters.set('projType', String(projType));
        }

        if (projName !== undefined) {
            queryParameters.set('projName', String(projName));
        }

        if (projStatus !== undefined) {
            queryParameters.set('projStatus', String(projStatus));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjAccessoriesByRef
     * สำหรับการลบข้อมูลProject Accessories ตาม Primary Key
     * @param projAccessoriesRef 
     */
    public removeProjAccessoriesByRef(projAccessoriesRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritAccessories/{projAccessoriesRef}'
            .replace('{' + 'projAccessoriesRef' + '}', String(projAccessoriesRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projAccessoriesRef' is not null or undefined
        if (projAccessoriesRef === null || projAccessoriesRef === undefined) {
            throw new Error('Required parameter projAccessoriesRef was null or undefined when calling removeProjAccessoriesByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjAccessoriesList
     * สำหรับการลบข้อมูลProject Accessories
     * @param body 
     */
    public removeProjAccessoriesList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritAccessories';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjConditionByRef
     * สำหรับการลบข้อมูลเงื่อนไขของโครงการ ตาม Primary Key
     * @param projConditionRef 
     */
    public removeProjConditionByRef(projConditionRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCondition/{projConditionRef}'
            .replace('{' + 'projConditionRef' + '}', String(projConditionRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projConditionRef' is not null or undefined
        if (projConditionRef === null || projConditionRef === undefined) {
            throw new Error('Required parameter projConditionRef was null or undefined when calling removeProjConditionByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjConditionList
     * สำหรับการลบข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public removeProjConditionList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjCustomerByRef
     * สำหรับการลบข้อมูลProject Customer ตาม Primary Key
     * @param projCustomerRef 
     */
    public removeProjCustomerByRef(projCustomerRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCustomer/{projCustomerRef}'
            .replace('{' + 'projCustomerRef' + '}', String(projCustomerRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCustomerRef' is not null or undefined
        if (projCustomerRef === null || projCustomerRef === undefined) {
            throw new Error('Required parameter projCustomerRef was null or undefined when calling removeProjCustomerByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjCustomerList
     * สำหรับการลบข้อมูลProject Customer
     * @param body 
     */
    public removeProjCustomerList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritCustomer';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjDeliverByRef
     * สำหรับการลบข้อมูลการส่งมอบโครงการ ตาม Primary Key
     * @param projDeliverRef 
     */
    public removeProjDeliverByRef(projDeliverRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritDeliver/{projDeliverRef}'
            .replace('{' + 'projDeliverRef' + '}', String(projDeliverRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projDeliverRef' is not null or undefined
        if (projDeliverRef === null || projDeliverRef === undefined) {
            throw new Error('Required parameter projDeliverRef was null or undefined when calling removeProjDeliverByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjDeliverList
     * สำหรับการลบข้อมูลการส่งมอบโครงการ
     * @param body 
     */
    public removeProjDeliverList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritDeliver';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjLanguageByRef
     * สำหรับการลบข้อมูลProject Language ตาม Primary Key
     * @param projLanguageRef 
     */
    public removeProjLanguageByRef(projLanguageRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLanguage/{projLanguageRef}'
            .replace('{' + 'projLanguageRef' + '}', String(projLanguageRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projLanguageRef' is not null or undefined
        if (projLanguageRef === null || projLanguageRef === undefined) {
            throw new Error('Required parameter projLanguageRef was null or undefined when calling removeProjLanguageByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjLanguageList
     * สำหรับการลบข้อมูลProject Language
     * @param body 
     */
    public removeProjLanguageList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLanguage';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjLimitByRef
     * สำหรับการลบข้อมูลProject Limit ตาม Primary Key
     * @param projLimitRef 
     */
    public removeProjLimitByRef(projLimitRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLimit/{projLimitRef}'
            .replace('{' + 'projLimitRef' + '}', String(projLimitRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projLimitRef' is not null or undefined
        if (projLimitRef === null || projLimitRef === undefined) {
            throw new Error('Required parameter projLimitRef was null or undefined when calling removeProjLimitByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjLimitList
     * สำหรับการลบข้อมูลProject Limit
     * @param body 
     */
    public removeProjLimitList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritLimit';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjMethodByRef
     * สำหรับการลบข้อมูลProject Method ตาม Primary Key
     * @param projMethodRef 
     */
    public removeProjMethodByRef(projMethodRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMethod/{projMethodRef}'
            .replace('{' + 'projMethodRef' + '}', String(projMethodRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projMethodRef' is not null or undefined
        if (projMethodRef === null || projMethodRef === undefined) {
            throw new Error('Required parameter projMethodRef was null or undefined when calling removeProjMethodByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjMethodList
     * สำหรับการลบข้อมูลProject Method
     * @param body 
     */
    public removeProjMethodList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMethod';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjMonitorByRef
     * สำหรับการลบข้อมูลProject Monitor ตาม Primary Key
     * @param projMonitorRef 
     */
    public removeProjMonitorByRef(projMonitorRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMonitor/{projMonitorRef}'
            .replace('{' + 'projMonitorRef' + '}', String(projMonitorRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projMonitorRef' is not null or undefined
        if (projMonitorRef === null || projMonitorRef === undefined) {
            throw new Error('Required parameter projMonitorRef was null or undefined when calling removeProjMonitorByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjMonitorList
     * สำหรับการลบข้อมูลProject Monitor
     * @param body 
     */
    public removeProjMonitorList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritMonitor';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjOtherByRef
     * สำหรับการลบข้อมูลProject Other ตาม Primary Key
     * @param projOtherRef 
     */
    public removeProjOtherByRef(projOtherRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritOther/{projOtherRef}'
            .replace('{' + 'projOtherRef' + '}', String(projOtherRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projOtherRef' is not null or undefined
        if (projOtherRef === null || projOtherRef === undefined) {
            throw new Error('Required parameter projOtherRef was null or undefined when calling removeProjOtherByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjOtherList
     * สำหรับการลบข้อมูลProject Other
     * @param body 
     */
    public removeProjOtherList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritOther';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjScopeByRef
     * สำหรับการลบข้อมูลขอบเขตของโครงการ ตาม Primary Key
     * @param projScopeRef 
     */
    public removeProjScopeByRef(projScopeRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritScope/{projScopeRef}'
            .replace('{' + 'projScopeRef' + '}', String(projScopeRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projScopeRef' is not null or undefined
        if (projScopeRef === null || projScopeRef === undefined) {
            throw new Error('Required parameter projScopeRef was null or undefined when calling removeProjScopeByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjScopeList
     * สำหรับการลบข้อมูลขอบเขตของโครงการ
     * @param body 
     */
    public removeProjScopeList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritScope';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjSystemsByRef
     * สำหรับการลบข้อมูลProject Systems ตาม Primary Key
     * @param projSystemsRef 
     */
    public removeProjSystemsByRef(projSystemsRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritSystems/{projSystemsRef}'
            .replace('{' + 'projSystemsRef' + '}', String(projSystemsRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projSystemsRef' is not null or undefined
        if (projSystemsRef === null || projSystemsRef === undefined) {
            throw new Error('Required parameter projSystemsRef was null or undefined when calling removeProjSystemsByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjSystemsList
     * สำหรับการลบข้อมูลProject Systems
     * @param body 
     */
    public removeProjSystemsList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritSystems';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjToolsByRef
     * สำหรับการลบข้อมูลProject Tools ตาม Primary Key
     * @param projToolsRef 
     */
    public removeProjToolsByRef(projToolsRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTools/{projToolsRef}'
            .replace('{' + 'projToolsRef' + '}', String(projToolsRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projToolsRef' is not null or undefined
        if (projToolsRef === null || projToolsRef === undefined) {
            throw new Error('Required parameter projToolsRef was null or undefined when calling removeProjToolsByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjToolsList
     * สำหรับการลบข้อมูลProject Tools
     * @param body 
     */
    public removeProjToolsList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTools';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjTrainByRef
     * สำหรับการลบข้อมูลProject Train ตาม Primary Key
     * @param projTrainRef 
     */
    public removeProjTrainByRef(projTrainRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTrain/{projTrainRef}'
            .replace('{' + 'projTrainRef' + '}', String(projTrainRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projTrainRef' is not null or undefined
        if (projTrainRef === null || projTrainRef === undefined) {
            throw new Error('Required parameter projTrainRef was null or undefined when calling removeProjTrainByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjTrainList
     * สำหรับการลบข้อมูลProject Train
     * @param body 
     */
    public removeProjTrainList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritTrain';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjectInformationByRef
     * สำหรับการลบข้อมูลรายละเอียดโครงการ ตาม Primary Key
     * @param projRef 
     */
    public removeProjectInformationByRef(projRef: number, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritInformation/{projRef}'
            .replace('{' + 'projRef' + '}', String(projRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projRef' is not null or undefined
        if (projRef === null || projRef === undefined) {
            throw new Error('Required parameter projRef was null or undefined when calling removeProjectInformationByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjectInformationList
     * สำหรับการลบข้อมูลรายละเอียดโครงการ
     * @param body 
     */
    public removeProjectInformationList(body?: Array<number>, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/pritInformation';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
