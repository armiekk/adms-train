/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ApipricustomerApi {
    protected basePath = '/resources';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * create a new pritCustomer
     * Create a new pritCustomer
     * @param body 
     */
    public createPritCustomer(body?: models.PritCustomer, extraHttpRequestParams?: any): Observable<{}> {
        return this.createPritCustomerWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * get all the pritCustomers
     * 
     */
    public getAllPritCustomers(extraHttpRequestParams?: any): Observable<{}> {
        return this.getAllPritCustomersWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * get the pritCustomer
     * 
     * @param projCustomerRef 
     */
    public getPritCustomer(projCustomerRef: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.getPritCustomerWithHttpInfo(projCustomerRef, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * remove the pritCustomer
     * 
     * @param projCustomerRef 
     */
    public removePritCustomer(projCustomerRef: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.removePritCustomerWithHttpInfo(projCustomerRef, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * update pritCustomer
     * Updates an existing pritCustomer
     * @param body 
     */
    public updatePritCustomer(body?: models.PritCustomer, extraHttpRequestParams?: any): Observable<{}> {
        return this.updatePritCustomerWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * create a new pritCustomer
     * Create a new pritCustomer
     * @param body 
     */
    public createPritCustomerWithHttpInfo(body?: models.PritCustomer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/pri/customer`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * get all the pritCustomers
     * 
     */
    public getAllPritCustomersWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/pri/customer`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * get the pritCustomer
     * 
     * @param projCustomerRef 
     */
    public getPritCustomerWithHttpInfo(projCustomerRef: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/pri/customer/${projCustomerRef}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'projCustomerRef' is not null or undefined
        if (projCustomerRef === null || projCustomerRef === undefined) {
            throw new Error('Required parameter projCustomerRef was null or undefined when calling getPritCustomer.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * remove the pritCustomer
     * 
     * @param projCustomerRef 
     */
    public removePritCustomerWithHttpInfo(projCustomerRef: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/pri/customer/${projCustomerRef}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'projCustomerRef' is not null or undefined
        if (projCustomerRef === null || projCustomerRef === undefined) {
            throw new Error('Required parameter projCustomerRef was null or undefined when calling removePritCustomer.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * update pritCustomer
     * Updates an existing pritCustomer
     * @param body 
     */
    public updatePritCustomerWithHttpInfo(body?: models.PritCustomer, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/pri/customer`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];



        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
