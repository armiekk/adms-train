/**
 * 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class PritConditionApi {
    protected basePath = 'http://localhost:8080/adms-pri/api/pri';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * PriBussinessSpec.addProjCondition
     * สำหรับการบันทึกข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public addProjCondition (body?: models.ProjConditionAddBean, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.editProjCondition
     * สำหรับการแก้ไขข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public editProjCondition (body?: models.ProjConditionBean, extraHttpRequestParams?: any ) : Observable<models.ProjConditionBean> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjConditionByRef
     * สำหรับการค้นหาตารางข้อมูลเงื่อนไขของโครงการ ตาม Primary Key
     * @param projConditionRef 
     */
    public getProjConditionByRef (projConditionRef: number, extraHttpRequestParams?: any ) : Observable<models.PritCondition> {
        const path = this.basePath + '/pritCondition/{projConditionRef}'
            .replace('{' + 'projConditionRef' + '}', String(projConditionRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projConditionRef' is not null or undefined
        if (projConditionRef === null || projConditionRef === undefined) {
            throw new Error('Required parameter projConditionRef was null or undefined when calling getProjConditionByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.getProjConditionList
     * สำหรับการค้นหาตารางข้อมูลเงื่อนไขของโครงการ
     * @param projCode 
     * @param start 
     * @param size 
     */
    public getProjConditionList (projCode: string, start?: number, size?: number, extraHttpRequestParams?: any ) : Observable<Array<models.ProjConditionBean>> {
        const path = this.basePath + '/pritCondition/projCode/{projCode}'
            .replace('{' + 'projCode' + '}', String(projCode));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projCode' is not null or undefined
        if (projCode === null || projCode === undefined) {
            throw new Error('Required parameter projCode was null or undefined when calling getProjConditionList.');
        }
        if (start !== undefined) {
            queryParameters.set('start', String(start));
        }

        if (size !== undefined) {
            queryParameters.set('size', String(size));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjConditionByRef
     * สำหรับการลบข้อมูลเงื่อนไขของโครงการ ตาม Primary Key
     * @param projConditionRef 
     */
    public removeProjConditionByRef (projConditionRef: number, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/pritCondition/{projConditionRef}'
            .replace('{' + 'projConditionRef' + '}', String(projConditionRef));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'projConditionRef' is not null or undefined
        if (projConditionRef === null || projConditionRef === undefined) {
            throw new Error('Required parameter projConditionRef was null or undefined when calling removeProjConditionByRef.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * PriBussinessSpec.removeProjConditionList
     * สำหรับการลบข้อมูลเงื่อนไขของโครงการ
     * @param body 
     */
    public removeProjConditionList (body?: Array<number>, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/pritCondition';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
